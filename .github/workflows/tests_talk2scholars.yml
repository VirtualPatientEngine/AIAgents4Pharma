# This is a basic workflow to help you get started with GitHub Actions
name: TESTS Talk2Scholars

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  pull_request:
    branches: [main]
    paths:
      - "aiagents4pharma/talk2scholars/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ZOTERO_API_KEY: ${{ secrets.ZOTERO_API_KEY }}
  ZOTERO_USER_ID: ${{ secrets.ZOTERO_USER_ID }}

# This workflow contains jobs covering linting and code coverage (along with testing).
jobs:
  pylint-windows-ubuntu-macos:
    # The type of runner that the job will run on
    name: pylint-windows-ubuntu-macos
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-13]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache files
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ${{ github.workspace }}/venv/*
            ${{ github.workspace }}\venv\*
          key: ${{ runner.os }}-venv

      # install requirements
      - name: Install the requirements
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          ${{ matrix.os == 'windows-latest' && 'venv\\Scripts\\activate' || 'source venv/bin/activate' }}
          pip install --upgrade pip
          pip3 install --break-system-packages -r requirements.txt

      # pylint
      - name: Run pylint
        run: |
          ${{ matrix.os == 'windows-latest' && 'venv\\Scripts\\activate' || 'source venv/bin/activate' }}
          pylint --disable=R0801,R0902,W0221,W0122 aiagents4pharma/talk2scholars

  # code coverage job for ubuntu and macos
  code-cov-ubuntu-macos:
    name: code-coverage-ubuntu-macos
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache files
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ${{ github.workspace }}/venv/*
          key: ${{ runner.os }}-venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip3 install --break-system-packages -r requirements.txt

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          coverage run --include=aiagents4pharma/talk2scholars/* -m pytest --cache-clear aiagents4pharma/talk2scholars/tests/

      - name: Check coverage
        run: |
          source venv/bin/activate
          coverage report -m
          TOTAL_COVERAGE=$(coverage report -m | awk 'END {print int($NF)}')
          if [[ $TOTAL_COVERAGE -ne 100 ]]; then
            echo "Code coverage is not 100%. Please check the coverage report."
            exit 1
          fi
        env:
          COVERAGE_FILE: "./.coverage"

  # code coverage job for windows
  code-cov-windows:
    name: code-coverage-windows
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache files
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ${{ github.workspace }}\venv\*
          key: ${{ runner.os }}-venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          venv\Scripts\activate
          pip install --upgrade pip
          pip3 install --break-system-packages -r requirements.txt

      - name: Run tests with coverage
        run: |
          venv\Scripts\activate
          coverage run --include=aiagents4pharma/talk2scholars/* -m pytest --cache-clear aiagents4pharma/talk2scholars/tests/

      - name: Check coverage
        run: |
          venv\Scripts\activate
          coverage report -m
          # $TOTAL_COVERAGE=(& coverage report -m | Select-Object -Last 1) -replace "[^\d]"  # Extract the last line and remove non-numeric characters
          $TOTAL_COVERAGE=(& coverage report -m | Select-Object -Last 1)
          # split and extract the last element
          $TOTAL_COVERAGE=($TOTAL_COVERAGE -split " ")[-1]
          # remove non-numeric characters
          $TOTAL_COVERAGE=($TOTAL_COVERAGE -replace "[^\d]")
          # convert to int
          $TOTAL_COVERAGE=[int]$TOTAL_COVERAGE
          echo "Total coverage: $TOTAL_COVERAGE"
          if ($TOTAL_COVERAGE -ne 100) {
            Write-Host "Code coverage is not 100%. Please check the coverage report."
            exit 1
          }
        env:
          COVERAGE_FILE: "./.coverage"
