# Modern CI workflow using uv for fast, reliable dependency management
name: TESTS Talk2KnowledgeGraphs

on:
  pull_request:
    branches: [main]
    paths:
      - "aiagents4pharma/talk2knowledgegraphs/**"
      - "pyproject.toml"
      - "uv.lock"
  workflow_dispatch:

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}

jobs:
  # Code quality checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run pylint
        run: uv run pylint --disable=R0801,R0902,W0221,W0122 aiagents4pharma/talk2knowledgegraphs

      - name: Run ruff linting
        run: uv run ruff check aiagents4pharma/talk2knowledgegraphs

      - name: Run bandit security scan
        run: uv run bandit -c pyproject.toml -r aiagents4pharma/talk2knowledgegraphs

  # Cross-platform testing matrix
  test-matrix:
    name: Tests
    needs: quality-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15, windows-latest]
        python-version: ["3.12"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run tests with coverage
        run: |
          uv run coverage run --include=aiagents4pharma/talk2knowledgegraphs/* -m pytest --cache-clear aiagents4pharma/talk2knowledgegraphs/tests/

      - name: Generate coverage report
        run: |
          uv run coverage report -m
          uv run coverage xml

      - name: Check coverage threshold
        run: |
          TOTAL_COVERAGE=$(uv run coverage report -m | awk 'END {print int($NF)}')
          if [[ $TOTAL_COVERAGE -ne 100 ]]; then
            echo "Code coverage is not 100%. Please check the coverage report."
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: talk2knowledgegraphs
          name: talk2knowledgegraphs-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
